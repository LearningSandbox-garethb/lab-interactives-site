{
  "title": "Electrostatics: Maze Game",
  "publicationStatus": "public",
  "labEnvironment": "production",
  "subtitle": "Guide a charged object through a maze.",
  "category": "",
  "subCategory": "",
  "screenshot": "",
  "aspectRatio": 2.04,
  "fontScale": 0.65,
  "lang": "en-US",
  "i18nMetadata": "",
  "credits": "",
  "helpOnLoad": true,
  "aboutOnLoad": false,
  "about": [
    "Use an understanding of charged objects to guide an object through a maze. The charge of the gray ",
    "ball can be changed by using the -, 0, and + buttons. Try using the attractive and repulsive forces ",
    "between charged objects to navigate through the maze. Can you get it to the target before time runs out?",
    "***",
    "*This simulation was adapted by [the Interactions project](https://concord.org/projects/interactions \"the Interactions Project\") ",
    "with funding from the National Science Foundation (DRL-1232388) in partnership with ",
    "[the CREATE for STEM Institute](http://create4stem.msu.edu/ \"the CREATE for STEM Institute\") at Michigan State University. To learn more, ",
    "[visit the Interactions curriculum collection](https://learn.concord.org/interactions \"visit the Interactions curriculum collection\") in ",
    "which this simulation is embedded.*"
    ],
  "theme": "",
  "showTopBar": true,
  "showBottomBar": true,
  "padding": 10,
  "models": [
    {
      "type": "md2d",
      "id": "three-atoms-three-elements$0",
      "url": "models-converted/lab-version/1/md2d/interactions/maze-game/mazeGameModified$0.json",
      "importedFrom": "imports/legacy-mw-content/interactions/maze-game/mazeGame$0.mml",
      "onLoad": [
        "var props;",
        "setObstacleProperties(1,{",
        "  height: get('height') - getObstacleProperties(0).y",
        "});",
        "props = getObstacleProperties(3);",
        "setObstacleProperties(3,{",
        "  height: props.y + props.height,",
        "  width: props.x + props.width,",
        "  x: 0,",
        "  y: 0",
        "});",
        "props = getObstacleProperties(4);",
        "setObstacleProperties(4,{",
        "  width: props.x + props.width,",
        "  height: get('height') - props.y,",
        "  x: 0",
        "});",
        "props = getObstacleProperties(5);",
        "setObstacleProperties(5,{",
        "  width: getObstacleProperties(1).x - props.x",
        "});",
        "props = getObstacleProperties(2);",
        "setObstacleProperties(2, {",
        "  y: getObstacleProperties(6).y + getObstacleProperties(6).height,",
        "  height: getObstacleProperties(0).x - (getObstacleProperties(6).y + getObstacleProperties(6).height)",
        "});",
        "props = getObstacleProperties(6);",
        "setObstacleProperties(6,{",
        "  y: 0,",
        "  height: getObstacleProperties(2).y",
        "});",
        "props = getObstacleProperties(7);",
        "setObstacleProperties(7,{",
        "  height: props.y + props.height,",
        "  y: 0",
        "});",
        "var renderUpdateTimeStep = get('timeStep') * get('timeStepsPerTick') * 10;",
        "callEvery(renderUpdateTimeStep, function(t) {",
        "  var countdown = get('countdown');",
        "  setTextBoxProperties(0,{text: format('0.0f')(countdown)});",
        "  if (countdown <= 0) { ",
        "    stop();",
        "    alert('Game over!');",
        "  } else {",
        "    var target = getShapeProperties(0);",
        "    if (atomsWithinRect(target.x, target.y, target.width, target.height).length > 0) {",
        "      stop();",
        "      if(get('max-countdown-time') - countdown <= 15) {",
        "        alert('Did you cheat?');",
        "      } else {",
        "        alert('You won!');",
        "      }",
        "    }",
        "  }",
        "});"
      ],
      "viewOptions": {
        "controlButtons": "",
        "enableKeyboardHandlers": false,
        "imageMapping": {
          "target.png": "target.svg"
        },
        "textBoxes": [
          {
            "text": "50",
            "x": 6.3,
            "y": 0.4,
            "layer": 2,
            "width": 0.25,
            "textAlign": "center",
            "fontScale": 1.6,
            "frame": "rounded rectangle",
            "backgroundColor": "rgba(249,238,193,1)"
          }
        ]
      }
    }
  ],
  "propertiesToRetain": [],
  "parameters": [
    {
      "name": "max-model-time",
      "initialValue": 250000,
      "onChange": []
    },
    {
      "name": "max-countdown-time",
      "initialValue": 50,
      "onChange": [
        "set('max-model-time', (value/2)*10000);",
        "setTextBoxProperties(0,{text: format('0.0f')(value)});"
      ]
    }
  ],
  "outputs": [
    {
      "name": "countdown",
      "value": "return (1 - get('time')/get('max-model-time'))*get('max-countdown-time')",
      "label": "Countdown",
      "unitType": "",
      "unitAbbreviation": ""
    }
  ],
  "filteredOutputs": [],
  "helpTips": [
    {
      "component": "",
      "text": [
        "Welcome to the Maze Game!",
        "- - -",
        "Your goal is to get the gray ball to the target before time runs out."
      ],
      "showcase": true
    },
    {
      "component": "set-negative",
      "text": [
        "Gives the ball a negative charge."
      ],
      "showcase": true
    },
    {
      "component": "set-neutral",
      "text": [
        "Removes all charge from the ball."
      ],
      "showcase": true
    },
    {
      "component": "set-positive",
      "text": [
        "Gives the ball a positive charge."
      ],
      "showcase": true
    }
  ],
  "dataSets": [],
  "components": [
    {
      "id": "set-negative",
      "type": "button",
      "action": "setAtomProperties(0,{charge:-1});start()",
      "text": "-",
      "width": "",
      "height": "",
      "disabled": false,
      "tooltip": "",
      "helpIcon": false
    },
    {
      "id": "set-neutral",
      "type": "button",
      "action": "setAtomProperties(0,{charge:0});start()",
      "text": "0",
      "width": "",
      "height": "",
      "disabled": false,
      "tooltip": "",
      "helpIcon": false
    },
    {
      "id": "set-positive",
      "type": "button",
      "action": "setAtomProperties(0,{charge:1});start()",
      "text": "+",
      "width": "",
      "height": "",
      "disabled": false,
      "tooltip": "",
      "helpIcon": false
    },
    {
      "id": "run",
      "type": "button",
      "action": "start()",
      "text": "Run",
      "width": "",
      "height": "",
      "disabled": false,
      "tooltip": "",
      "helpIcon": false
    },
    {
      "id": "stop",
      "type": "button",
      "action": "stop()",
      "text": "Stop",
      "width": "",
      "height": "",
      "disabled": false,
      "tooltip": "",
      "helpIcon": false
    },
    {
      "id": "reset",
      "type": "button",
      "action": "reloadModel();",
      "text": "Reset",
      "width": "",
      "height": "",
      "disabled": false,
      "tooltip": "",
      "helpIcon": false
    },
    {
      "id": "difficulty",
      "type": "pulldown",
      "label": "",
      "labelOn": "top",
      "options": [
        {
          "text": "Easier",
          "value": 50
        },
        {
          "text": "Harder",
          "value": 25
        }
      ],
      "property": "max-countdown-time",
      "retainProperty": true,
      "disabled": false,
      "tooltip": "Change the game diffulty. Harder mode has a shorter countdown.",
      "helpIcon": false
    }
  ],
  "layout": {
    "bottom": [
      "set-negative",
      "set-neutral",
      "set-positive",
      "run",
      "reset",
      "stop",
      "difficulty"
    ]
  },
  "template": [
    {
      "id": "bottom",
      "top": "model.bottom",
      "width": "model.width",
      "left": "model.left",
      "align": "center"
    },
    {
      "id": "right",
      "padding-left": "0.5em",
      "left": "model.right",
      "top": "model.top"
    }
  ]
}
