{
  "title": "Energy of Bond Formation",
  "publicationStatus": "draft",
  "subtitle": "",
  "about": "",
  "aspectRatio": 0.95,
  "models": [{
    "type": "md2d",
    "id": "deformedCloud$0",
    "url": "models/lab-version/1/md2d/interactions/forming-molecule.json",
    "viewOptions": {
      "controlButtons": "reset",
      "enableKeyboardHandlers": false
    },
    "onLoad": [
      "",
      "//Add electrons",
      "var atoms = [getAtomProperties(0), getAtomProperties(1)],",
      "    maxElectrons = 2;",
      "for (var e = 0; e < maxElectrons; e++) {",
      "  addShape({",
      "    type: 'ellipse',",
      "    width: 0.03,",
      "    height: 0.03,",
      "    x: atoms[e].x,",
      "    y: atoms[e].y,",
      "    fence: 0,",
      "    color: 'rgb(255, 0, 0)',",
      "    lineColor: 'black',",
      "    lineDashes: 'none',",
      "    lineWeight: 0,",
      "    layer: 1,",
      "    layerPosition: 100,",
      "    visible: 1",
      "  });",
      "};",
      "function randomizeElectrons(){",
      "  var ellipse,",
      "      randomAngle,",
      "      randomDistance;",
      "  for (var e = 0; e < maxElectrons; e++) {",
      "    ellipse = getShapeProperties(e);",
      "    randomAngle = 2 * Math.PI * Math.random();",
      "    randomDistance = Math.sqrt(-2 * Math.log(Math.random()));",
      "    // Convert random angle and distance from polar",
      "    // to rectangular coordinates",
      "    setShapeProperties(getNumberOfShapes() - maxElectrons + e, {",
      "      x: ellipse.x + ellipse.width * (0.5 + 0.125 * randomDistance * Math.cos(randomAngle)),",
      "      y: ellipse.y + ellipse.height * (0.5 + 0.125 * randomDistance * Math.sin(randomAngle)),",
      "    })",
      "  }",
      "}",
      "function updateVisualization(){",
      "  atoms = [getAtomProperties(0), getAtomProperties(1)];",
      "  var distance  = atoms[1].x - atoms[0].x,",
      "      closeness = (2 - Math.min(distance,2)) / 2,",
      "      squeeze   = (closeness < 0.4) ? 0.7 * closeness : 0.28 - (0.7 * (closeness - 0.4)),",
      "      force     = atoms[0].ax,",
      "      displacement = squeeze * 1.3,",
      "      baseSize0 = getElementProperties(atoms[0].element).sigma * 10,",
      "      baseSize1 = getElementProperties(atoms[1].element).sigma * 10,",
      "      newWidth0 = baseSize0 + squeeze,",
      "      newWidth1 = baseSize1 + squeeze,",
      "      newHeight0 = baseSize0 - Math.abs(squeeze),",
      "      newHeight1 = baseSize1 - Math.abs(squeeze),",
      "      _pe = pe(),",
      "      forceText, forceTextX, forceTextY, fontSize;",
      "  setShapeProperties(0, {",
      "    width: newWidth0,",
      "    height: newHeight0,",
      "    x: atoms[0].x - newWidth0 / 2 + displacement,",
      "    y: atoms[0].y - newHeight0 / 2",
      "  });",
      "  setShapeProperties(1, {",
      "    width: newWidth1,",
      "    height: newHeight1,",
      "    x: atoms[1].x - newWidth1 / 2 - displacement,",
      "    y: atoms[1].y - newHeight1 / 2",
      "  });",
      "  if ((Math.abs(force) < 2.5e-6 && _pe < -1) || (Math.abs(force) < 1e-5 && _pe < -3)) force = 0;",
      "  setAtomProperties(0, {vx: force});",
      "  setAtomProperties(1, {vx: -force});",
      "  forceText = force == 0 ? _pe > -1 ? 'None' : 'Balanced' : force > 0 ? 'Attractive' : 'Repulsive',",
      "  fontSize  = Math.abs(force) > 0.0006 ? 0.22 : 0.14;",
      "  forceTextX = fontSize == 0.14 ? 2.7 : 2.64",
      "  forceTextY = fontSize == 0.14 ? 0.7 : 0.79",
      "  setTextBoxProperties(1, {text: forceText, fontSize: fontSize, x: forceTextX, y: forceTextY});",
      "  removeLine(0, {silent: true});",
      "  if (forceText == 'Balanced') {",
      "    addLine({",
      "      x1: atoms[0].x+getElementProperties(atoms[0].element).sigma/2,",
      "      y1: atoms[0].y,",
      "      x2: atoms[1].x-getElementProperties(atoms[1].element).sigma/2,",
      "      y2: atoms[1].y,",
      "      layer: 3,",
      "      lineWeight: 3,",
      "      lineColor: 'rgb(150, 150, 150)'",
      "    });",
      "  }",
      "}",
      "setInterval(function(){",
      "  batch(randomizeElectrons);",
      "  batch(updateVisualization);",
      "}, 50);",
      "onDrag('atom', function (x, y, d, i) {",
      "  var minX = i == 0 ? 0 : getAtomProperties(0).x + 0.16,",
      "      maxX = i == 1 ? 5 : getAtomProperties(1).x - 0.16,",
      "      newX = Math.max(Math.min(x, maxX), minX);",
      "  setAtomProperties(i, {x: newX});",
      "  setAtomProperties(0, {y: 1.5374090707241856});",
      "  setAtomProperties(1, {y: 1.5374090707241856});",
      "  if (pe() < 100) {",
      "   atoms = [getAtomProperties(0), getAtomProperties(1)];",
      "   set('dist', (atoms[1].x - atoms[0].x)*74);",
      "  }",
      "});",
      "updateVisualization();"
    ]
  }],
  "parameters": [
    {
      "name": "dist",
      "initialValue": 250,
      "onChange": "appendDataPropertiesToComponent('potentialEnergyGraph');"
    },
    {
      "name": "left-element",
      "initialValue": 0,
      "onChange": [
        "setAtomProperties(0, {element: value});",
        "if (get('viz')) {",
        "  setTextBoxProperties(2, {text: value == 0 ? 'H' :  value == 1 ? 'C' : 'O'});",
        "}"
      ]
    },
    {
      "name": "right-element",
      "initialValue": 0,
      "onChange": [
        "setAtomProperties(1, {element: value});",
        "if (get('viz')) {",
        "  setTextBoxProperties(3, {text: value == 0 ? 'H' :  value == 1 ? 'C' : 'O'});",
        "}"
      ]
    },
    {
      "name": "viz",
      "initialValue": 0,
      "onChange": ["if (!value) {",
                   "  setElementProperties(0, {sigma: 0.15});",
                   "  setElementProperties(1, {sigma: 0.3});",
                   "  setElementProperties(2, {sigma: 0.2});",
                   "  for (var i = 0; i < 4; i++){",
                   "    setShapeProperties(i, {visible: true});",
                   "  }",
                   "  for (var i = 2; i < 4; i++){",
                   "    setTextBoxProperties(i, {layer: 2, text: ''});",
                   "  }",
                   "} else {",
                   "  setElementProperties(0, {sigma: 1.2});",
                   "  setElementProperties(1, {sigma: 2.4});",
                   "  setElementProperties(2, {sigma: 1.8});",
                   "  for (var i = 0; i < 4; i++){",
                   "    setShapeProperties(i, {visible: false});",
                   "  }",
                   "  for (var i = 2; i < 4; i++){",
                   "    var el = getAtomProperties([i-2]).element,",
                   "        text = el == 0 ? 'H' :  el == 1 ? 'C' : 'O';",
                   "    setTextBoxProperties(i, {layer: 1, text: text});",
                   "  }",
                   "};"
                  ]
    }
  ],
  "components": [
    {
      "type": "barGraph",
      "min": -6,
      "max": 6,
      "barWidth": "1.6em",
      "id": "potentialEnergyBar",
      "property": "potentialEnergy",
      "barColor": "#4c952f",
      "title": "Potential Energy (J)"
    },
    {
      "type": "graph",
      "id": "potentialEnergyGraph",
      "title": "",
      "xlabel": "Distance (pm)",
      "ylabel": "Potential Energy",
      "ymin": -6,
      "ymax": 6,
      "xmax": 300,
      "xTickCount": 5,
      "yTickCount": 6,
      "xFormatter": ".2r",
      "yFormatter": ".2s",
      "width": "70%",
      "height": "100%",
      "autoScaleX": false,
      "autoScaleY": false,
      "lines": false,
      "streamDataFromModel": false,
      "xProperty": "dist",
      "properties": [
        "potentialEnergy"
      ]
    },
    {
      "type": "radio",
      "orientation": "vertical",
      "id": "set-left-element",
      "property": "left-element",
      "label": "Left element",
      "labelOn": "top",
      "options": [
        {
          "text": "Hydrogen",
          "value": 0
        },
        {
          "text": "Oxygen",
          "value": 2
        },
        {
          "text": "Carbon",
          "value": 1
        }
      ]
    },
    {
      "type": "radio",
      "orientation": "vertical",
      "id": "set-right-element",
      "property": "right-element",
      "label": "Right element",
      "labelOn": "top",
      "options": [
        {
          "text": "Hydrogen",
          "value": 0
        },
        {
          "text": "Oxygen",
          "value": 2
        },
        {
          "text": "Carbon",
          "value": 1
        }
      ]
    },
    {
      "type": "radio",
      "orientation": "vertical",
      "id": "set-viz",
      "property": "viz",
      "label": "Visualization",
      "labelOn": "top",
      "options": [
        {
          "text": "Electron cloud",
          "value": 0
        },
        {
          "text": "Spacefill",
          "value": 1
        }
      ]
    }
  ],
  "layout": {
    "bottom": ["potentialEnergyBar", "potentialEnergyGraph"],
    "wide-right": [["set-left-element"], ["set-right-element"]],
    "right-bottom": ["set-viz"]
  },
  "template": [
    {
      "id": "wide-right",
      "left": "model.right",
      "height": "model.height * 0.8",
      "padding-left": "0.5em"
    },
    {
      "id": "right-bottom",
      "left": "model.right",
      "height": "model.height * 0.2",
      "bottom": "model.bottom",
      "padding-left": "0.5em"
    },
    {
      "id": "bottom",
      "top": "model.bottom",
      "left": "model.left",
      "right": "wide-right.right",
      "height": "model.height",
      "padding-top": "0.5em"
    }
  ]
}
