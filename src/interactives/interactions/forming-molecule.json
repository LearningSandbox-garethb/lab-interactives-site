{
  "title": "Forming a Molecule",
  "publicationStatus": "draft",
  "subtitle": "",
  "about": "",
  "aspectRatio": 1.33,
  "models": [{
    "type": "md2d",
    "id": "deformedCloud$0",
    "url": "models/lab-version/1/md2d/interactions/forming-molecule.json",
    "viewOptions": {
      "controlButtons": "",
      "enableKeyboardHandlers": false
    },
    "onLoad": [
      "setElementProperties(0, {color: -16776961});",
      "//Add electrons",
      "var atoms = [getAtomProperties(0), getAtomProperties(1)],",
      "    maxElectrons = 2;",
      "for (var e = 0; e < maxElectrons; e++) {",
      "  addShape({",
      "    type: 'ellipse',",
      "    width: 0.03,",
      "    height: 0.03,",
      "    x: atoms[e].x,",
      "    y: atoms[e].y,",
      "    fence: 0,",
      "    color: 'rgb(255, 0, 0)',",
      "    lineColor: 'black',",
      "    lineDashes: 'none',",
      "    lineWeight: 0,",
      "    layer: 1,",
      "    layerPosition: 100,",
      "    visible: 1",
      "  });",
      "};",
      "function randomizeElectrons(){",
      "  var ellipse,",
      "      randomAngle,",
      "      randomDistance;",
      "  for (var e = 0; e < maxElectrons; e++) {",
      "    ellipse = getShapeProperties(e);",
      "    randomAngle = 2 * Math.PI * Math.random();",
      "    randomDistance = Math.sqrt(-2 * Math.log(Math.random()));",
      "    // Convert random angle and distance from polar",
      "    // to rectangular coordinates",
      "    setShapeProperties(getNumberOfShapes() - maxElectrons + e, {",
      "      x: ellipse.x + ellipse.width * (0.5 + 0.125 * randomDistance * Math.cos(randomAngle)),",
      "      y: ellipse.y + ellipse.height * (0.5 + 0.125 * randomDistance * Math.sin(randomAngle)),",
      "    })",
      "  }",
      "}",
      "function updateVisualization(){",
      "  atoms = [getAtomProperties(0), getAtomProperties(1)];",
      "  var distance  = atoms[1].x - atoms[0].x,",
      "      closeness = (2 - Math.min(distance,2)) / 2,",
      "      squeeze   = (closeness < 0.4) ? 0.7 * closeness : 0.28 - (0.7 * (closeness - 0.4)),",
      "      force     = atoms[0].ax,",
      "      displacement = squeeze * 1.3,",
      "      newWidth = 1.5 + squeeze,",
      "      newHeight = 1.5 - Math.abs(squeeze),",
      "      _pe = pe(),",
      "      forceText, forceTextX, forceTextY, fontSize;",
      "  setShapeProperties(0, {",
      "    width: newWidth,",
      "    height: newHeight,",
      "    x: atoms[0].x - newWidth / 2 + displacement,",
      "    y: atoms[0].y - newHeight / 2",
      "  });",
      "  setShapeProperties(1, {",
      "    width: newWidth,",
      "    height: newHeight,",
      "    x: atoms[1].x - newWidth / 2 - displacement,",
      "    y: atoms[1].y - newHeight / 2",
      "  });",
      "  if (Math.abs(force) < 2.5e-6) force = 0;",
      "  setAtomProperties(0, {vx: force});",
      "  setAtomProperties(1, {vx: -force});",
      "  forceText = force == 0 ? _pe > -1 ? 'Attractive' : 'Balanced' : force > 0 ? 'Attractive' : 'Repulsive',",
      "  fontSize  = Math.abs(force) > 0.0006 ? 0.22 : (force == 0 && _pe > -1) ? 0.1 : 0.14;",
      "  forceTextX = fontSize == 0.14 ? 2.73 : fontSize == 0.1 ? 2.8 : 2.64",
      "  forceTextY = fontSize == 0.14 ? 0.7 : fontSize == 0.1 ? 0.65 : 0.79",
      "  setTextBoxProperties(1, {text: forceText, fontSize: fontSize, x: forceTextX, y: forceTextY});",
      "}",
      "setInterval(function(){",
      "  batch(randomizeElectrons);",
      "  batch(updateVisualization);",
      "}, 50);",
      "onDrag('atom', function (x, y, d, i) {",
      "  var minX = i == 0 ? 0 : getAtomProperties(0).x + 0.16,",
      "      maxX = i == 1 ? 5 : getAtomProperties(1).x - 0.16,",
      "      newX = Math.max(Math.min(x, maxX), minX);",
      "  setAtomProperties(i, {x: newX});",
      "  setAtomProperties(0, {y: 1.5374090707241856});",
      "  setAtomProperties(1, {y: 1.5374090707241856});",
      "});",
      "updateVisualization();"
    ]
  }],
  "parameters": [],
  "components": [],
  "layout": {},
  "template": []
}
