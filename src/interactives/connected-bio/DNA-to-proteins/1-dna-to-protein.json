{
  "title": "DNA to Protein (Connected Bio)",
  "publicationStatus": "public",
  "subtitle": "Explore how the code embedded in DNA is translated into a protein.",
  "aspectRatio": 1.05,
  "category": "Biology",
  "subCategory": "Genetics",
  "screenshot": "http://screenshots.lab.concord.org/1-dna-to-protein.png",
  "about": [
    "Click **Transcribe** to zoom into the cell nucleus and see the chromosome unravel to expose the strands of DNA. The DNA separates and an mRNA strand is created by matching complementary nucleotides.",
    "",
    "Click **Translate** to watch the mRNA leave the nucleus for the cytoplasm and attach to a ribosome. tRNA molecules bring in amino acids and the amino acids are added in the correct order by matching complementary nucleotides.",
    "",
    "After translation, inspect the protein to see how the amino acid sequence folded."
  ],
  "fontScale": 0.65,
  "models": [
    {
      "type": "md2d",
      "id": "page3$0",
      "url": "models-converted/lab-version/1/md2d/connected-bio/DNA-to-proteins/page1.json",
      "onLoad": [
        "var atomCount = getNumberOfAtoms();",
        "var atomElements = [];",
        "var backgroundImage = 'AminoAcid/Back.svg'",
        "function checkForParticles() {",
        "  if (getNumberOfAtoms() > atomCount){ ",
        "    atomCount = getNumberOfAtoms(); ",
        "    var a = getAtomProperties(atomCount - 1);",
        "    atomElements.push(a.element);",
        "    // Amino Acids have element numbers from index 5 to index 24",
        "    // see https://github.com/concord-consortium/lab/blob/057539e26bf6c87f7e00a0bd0b7799117b838da4/src/lab/models/md2d/models/modeler.js#L475",
        "    // and https://github.com/concord-consortium/lab/blob/master/src/lab/models/md2d/models/aminoacids-props.js for full list",
        "    var aa = getAminoAcid(a.element);",
        "    addImage(",
        "      {",
        "        'imageUri': backgroundImage,",
        "        'imageX': a.x,",
        "        'imageY': a.y,",
        "        'imageHostType': 'Atom',",
        "        'imageHostIndex': atomCount - 1,",
        "        'imageLayer': 1,",
        "        'imageLayerPosition': 1,",
        "        'visible': true,",
        "        'rotation': 0,",
        "        'scale': 0.04,",
        "        'opacity': 1",
        "      }",
        "    );",
        "    addImage(",
        "      {",
        "        'imageUri': 'AminoAcid/' + aa.abbreviation + '.svg',",
        "        'imageX': a.x,",
        "        'imageY': a.y,",
        "        'imageHostType': 'Atom',",
        "        'imageHostIndex': atomCount - 1,",
        "        'imageLayer': 1,",
        "        'imageLayerPosition': 2,",
        "        'visible': true,",
        "        'rotation': 0,",
        "        'scale': 0.04,",
        "        'opacity': 1",
        "      }",
        "    );",
        "  }",
        "  else { ",
        "    checkImages();",
        "  }",
        "}",

        "function checkImages() { ",
        "  if (getNumberOfAtoms() > 0){",

        "    // AA could be changed from one type to another via menu",
        "    // if this happens, we may need a different image",

        "    for (var i = 0; i < getNumberOfAtoms(); i++) {",
        "      var a = getAtomProperties(i);",
        "      if (a != undefined && atomElements[i] !== a.element) {",
        "        // update the tracking array - we now know we need to change this image",
        "        atomElements[i] = a.element;",

        "        // the intention here is to update the image for the atoms that have changed type - this can be done while the model is stopped but",
        "        // the image appearance will not changed until the model is restarted. ",
        "        let images = get('images');",
        "        for (var j = 0; j < images.length; j++){",
        "          if (images[j].imageHostIndex == i && images[j].imageUri != backgroundImage){",
        "            removeImage(j);",
        "            var a = getAtomProperties(i);",
        "            addImage(",
        "              {",
        "                'imageUri': 'AminoAcid/' + getAminoAcid(a.element).abbreviation + '.svg',",
        "                'imageX': a.x,",
        "                'imageY': a.y,",
        "                'imageHostType': 'Atom',",
        "                'imageHostIndex': i,",
        "                'imageLayer': 1,",
        "                'imageLayerPosition': 2,",
        "                'visible': true,",
        "                'rotation': 0,",
        "                'scale': 0.04,",
        "                'opacity': 1",
        "              }",
        "            );",
        "          }",
        "        }",
        "      }",
        "    }",
        "  }",
        "}",

        "onPropertyChange('time', checkForParticles);",
        "// callEvery(50, checkForParticles);"
      ],
      "viewOptions": {
        "controlButtons": "",
        "enableKeyboardHandlers": false
      },
      "modelOptions": {
        "DNA": "ATGCCAGGCGGCGAGAGCTTGCTAATTGGCTTATAG",
        "DNAState": "intro-cells"
      }
    }
  ],
  "components": [
    {
      "type": "button",
      "id": "transcribe",
      "text": "Transcribe",
      "action": [
        "if (DNAStateAfter('transcription-end'))",
        "  set('DNAState', 'dna');",
        "animateToDNAState('transcription-end');"
      ]
    },
    {
      "type": "button",
      "id": "transcribe-step",
      "text": "Transcribe step by step",
      "action": [
        "if (DNAStateBefore ('dna')) {",
        "  animateToDNAState('transcription:1');",
        "} else { ",
        "  transcribeDNAStep();",
        "}"
      ]
    },
    {
      "type": "button",
      "id": "translate",
      "text": "Translate",
      "action": [
        "if (DNAStateBefore('transcription-end')) {",
        "  alert('Translation can only occur after transcription is complete.');",
        "  return;",
        "}",
        "if (get('DNAState') === 'translation-end')",
        "  set('DNAState', 'translation:0');",
        "animateToDNAState('translation-end');"
      ]
    },
    {
      "type": "button",
      "id": "translate-step",
      "text": "Translate step by step",
      "action": [
        "if (DNAStateBefore('transcription-end')) {",
        "  alert('Translation can only occur after transcription is complete.');",
        "  return;",
        "} else {",
        "  translateDNAStep();",
        "}"
      ]
    },
    {
      "type": "text",
      "id": "label1",
      "text": "Click"
    },
    {
      "type": "text",
      "id": "label2",
      "text": "to see full mRNA strand created or"
    },
    {
      "type": "text",
      "id": "label3",
      "text": "Click"
    },
    {
      "type": "text",
      "id": "label4",
      "text": "to generate full protein from mRNA or"
    },
    {
      "type": "button",
      "id": "start",
      "text": "Start/continue model",
      "action": [
        "if (DNAStateBefore('translation-end')) animateToDNAState('translation-end');",
        "else start();"
      ]
    },
    {
      "type": "button",
      "id": "stop",
      "text": "Stop",
      "action": [
        "if (DNAStateBefore('translation-end')) stopDNAAnimation();",
        "else stop();"
      ]
    },
    {
      "type": "button",
      "id": "reset",
      "text": "Reset",
      "action": "reloadModel();"
    },
    {
      "type": "button",
      "id": "prev-state-jump",
      "text": "<< Jump",
      "action": "jumpToPrevDNAState();"
    },
    {
      "type": "button",
      "id": "next-state",
      "text": "Continue one step",
      "action": "animateToNextDNAState();"
    },
    {
      "type": "button",
      "id": "next-state-jump",
      "text": "Jump >>",
      "action": "jumpToNextDNAState();"
    },
    {
      "type": "button",
      "id": "dna-dialog",
      "text": "Edit DNA",
      "action": "openDNADialog();"
    }
  ],
  "layout": {
    "model-bottom": [
      [
        "label1",
        "transcribe",
        "label2",
        "transcribe-step"
      ],
      [
        "label3",
        "translate",
        "label4",
        "translate-step"
      ],
      [
        "start",
        "stop",
        "reset",
        "dna-dialog"
      ],
      [
        "prev-state-jump",
        "next-state",
        "next-state-jump"
      ]
    ]
  },
  "template": [
    {
      "id": "model-bottom",
      "left": "interactive.left",
      "height": "0.25 * interactive.height",
      "top": "model.bottom",
      "left": "interactive.left",
      "right": "interactive.right",
      "align": "center",
      "fontScale": 0.8
    },
    {
      "id": "right-padding-container",
      "left": "model.right",
      "width": 10
    },
    {
      "id": "model-centering-container",
      "top": "interactive.top",
      "right": "model.left",
      "width": "0.5 * (interactive.width - model.width) - 5"
    }
  ],
  "i18nMetadata": "locales/metadata/interactives/sam/DNA-to-proteins/1-dna-to-protein.json"
}