{
  "title": "Geniverse Gene to Protein",
  "publicationStatus": "public",
  "subtitle": "",
  "about": [
    "Geniverse Gene to Protein Genie"
  ],
  "aspectRatio": 1.05,
  "fontScale": 0.65,
  "models": [
    {
      "type": "md2d",
      "id": "page3$0",
      "url": "models-converted/lab-version/1/md2d/connected-bio/DNA-to-proteins/page1.json",
      "viewOptions": {
        "enableKeyboardHandlers": false
      },
      "modelOptions": {
        "DNA": "ATGGTGTGTCTGGGAGAATGCCGATGGCTTCACATGTTTCCATTCCTCATGGTATCACTT",
        "DNAState": "intro-cells"
      },
      "onLoad": [
        "var atomCount = getNumberOfAtoms();",
        "var atomElements = [];",
        "var backgroundImage = 'AminoAcid/Back.svg'",
        "function checkForParticles() {",
        "  if (getNumberOfAtoms() > atomCount){ ",
        "    atomCount = getNumberOfAtoms(); ",
        "    var a = getAtomProperties(atomCount - 1);",
        "    atomElements.push(a.element);",
        "    // Amino Acids have element numbers from index 5 to index 24",
        "    // see https://github.com/concord-consortium/lab/blob/057539e26bf6c87f7e00a0bd0b7799117b838da4/src/lab/models/md2d/models/modeler.js#L475",
        "    // and https://github.com/concord-consortium/lab/blob/master/src/lab/models/md2d/models/aminoacids-props.js for full list",
        "    var aa = getAminoAcid(a.element);",
        "    addImage(",
        "      {",
        "        'imageUri': backgroundImage,",
        "        'imageX': a.x,",
        "        'imageY': a.y,",
        "        'imageHostType': 'Atom',",
        "        'imageHostIndex': atomCount - 1,",
        "        'imageLayer': 1,",
        "        'imageLayerPosition': 1,",
        "        'visible': true,",
        "        'rotation': 0,",
        "        'scale': 0.04,",
        "        'opacity': 1",
        "      }",
        "    );",
        "    addImage(",
        "      {",
        "        'imageUri': 'AminoAcid/' + aa.abbreviation + '.svg',",
        "        'imageX': a.x,",
        "        'imageY': a.y,",
        "        'imageHostType': 'Atom',",
        "        'imageHostIndex': atomCount - 1,",
        "        'imageLayer': 1,",
        "        'imageLayerPosition': 2,",
        "        'visible': true,",
        "        'rotation': 0,",
        "        'scale': 0.04,",
        "        'opacity': 1",
        "      }",
        "    );",
        "  }",
        "  else { ",
        "    checkImages();",
        "  }",
        "}",

        "function checkImages() { ",
        "  if (getNumberOfAtoms() > 0){",

        "    // AA could be changed from one type to another via menu",
        "    // if this happens, we may need a different image",

        "    for (var i = 0; i < getNumberOfAtoms(); i++) {",
        "      var a = getAtomProperties(i);",
        "      if (a != undefined && atomElements[i] !== a.element) {",
        "        // update the tracking array - we now know we need to change this image",
        "        atomElements[i] = a.element;",

        "        // the intention here is to update the image for the atoms that have changed type - this can be done while the model is stopped but",
        "        // the image appearance will not changed until the model is restarted. ",
        "        let images = get('images');",
        "        for (var j = 0; j < images.length; j++){",
        "          if (images[j].imageHostIndex == i && images[j].imageUri != backgroundImage){",
        "            removeImage(j);",
        "            var a = getAtomProperties(i);",
        "            addImage(",
        "              {",
        "                'imageUri': 'AminoAcid/' + getAminoAcid(a.element).abbreviation + '.svg',",
        "                'imageX': a.x,",
        "                'imageY': a.y,",
        "                'imageHostType': 'Atom',",
        "                'imageHostIndex': i,",
        "                'imageLayer': 1,",
        "                'imageLayerPosition': 2,",
        "                'visible': true,",
        "                'rotation': 0,",
        "                'scale': 0.04,",
        "                'opacity': 1",
        "              }",
        "            );",
        "          }",
        "        }",
        "      }",
        "    }",
        "  }",
        "}",

        "onPropertyChange('time', checkForParticles);",
        "// callEvery(50, checkForParticles);",

        "onPropertyChange('state', function(s) {",
        "  console.log('animating to '+s);",
        "  animateToDNAState(s); ",
        "});",
        "onPropertyChange('snapState', function(s) {",
        "  console.log('snapping to '+s);",
        "  set('DNAState', s); ",
        "});"
      ]
    }
  ],
  "parameters": [
    {
      "name": "state",
      "initialValue": "intro-cells"
    },
    {
      "name": "snapState",
      "initialValue": "intro-cells"
    },
    {
      "name": "restraintsAdded",
      "initialValue": false
    }
  ],
  "components": [
    {
      "type": "button",
      "id": "transcribe",
      "text": "Transcribe all",
      "action": [
        "set('geneticEngineState', 'dna');",
        "animateToDNAState('transcription-end');"
      ]
    },
    {
      "type": "button",
      "id": "transcribe-step",
      "text": "Transcribe step by step",
      "action": "transcribeDNAStep();"
    },
    {
      "type": "button",
      "id": "translate",
      "text": "Translate all",
      "action": [
        "set('geneticEngineState', 'transcription-end');",
        "animateToDNAState('translation-end');"
      ]
    },
    {
      "type": "button",
      "id": "translate-step",
      "text": "Translate step by step",
      "action": "translateDNAStep();"
    },
    {
      "type": "button",
      "id": "unfold",
      "text": "Unfold protein",
      "action": [
        "var num = getNumberOfAtoms();                                        ",
        "var x1  = get('viewPortX') - 0.5;                                    ",
        "var x2  = get('viewPortX') + get('viewPortWidth') + 0.5;             ",
        "var y   = get('viewPortY') + get('viewPortHeight') / 2;              ",
        "var restraintsAdded = get('restraintsAdded');                        ",
        "if (!restraintsAdded) {                                              ",
        "  addRestraint({atomIndex: 0, k: 50, x0: x1, y0: y});                ",
        "  addRestraint({atomIndex: num-1, k: 50, x0: x2, y0: y})             ",
        "  set('restraintsAdded', true);                                      ",
        "} else {                                                             ",
        "  setRestraintProperties(0, {k:50, x0: x1, y0: y});                  ",
        "  setRestraintProperties(1, {atomIndex: num-1, k:50, x0: x2, y0: y});",
        "}                                                                    "
      ]
    },
    {
      "type": "button",
      "id": "refold",
      "text": "Refold protein",
      "action": [
        "if (get('restraintsAdded')) {        ",
        " setRestraintProperties(0, {k:0});   ",
        " setRestraintProperties(1, {k:0});   ",
        "}                                    "
      ]
    },
    {
      "type": "button",
      "id": "reset",
      "text": "Reset",
      "action": "set('snapState', 'dna');"
    }
  ],
  "template": [
    {
      "id": "model-bottom",
      "height": "0.25 * interactive.height",
      "top": "model.bottom",
      "left": "interactive.left",
      "right": "interactive.right",
      "align": "center",
      "fontScale": 0.8
    },
    {
      "id": "right-padding-container",
      "left": "model.right",
      "width": 10
    },
    {
      "id": "model-centering-container",
      "top": "interactive.top",
      "right": "model.left",
      "width": "0.5 * (interactive.width - model.width) - 5"
    }
  ],
  "layout": {
    "model-bottom": [
      [
        "transcribe",
        "transcribe-step"
      ],
      [
        "translate",
        "translate-step"
      ],
      [
        "unfold",
        "refold"
      ],
      [
        "reset"
      ]
    ]
  }
}