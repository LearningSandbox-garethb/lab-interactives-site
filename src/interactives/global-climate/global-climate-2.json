{
  "title": "Global Climate Variant 2",
  "publicationStatus": "draft",
  "subtitle": "",
  "about": "",
  "aspectRatio": 1.55,
  "fontScale": 0.7,
  "models": [
    {
      "type": "iframe-model",
      "id": "iframe-model",
      "url": "models/lab-version/1/iframe-model/iframe-model.json",
      "modelOptions":{
        "url": "http://concord-consortium.github.io/agentscript-models/global-climate/lab-embeddable.html",
        "animRate": 60,
        "showGases": true,
        "showRays": true,
        "showHeat": true,
        "keyLabels": [
          "solar radiation",
          "carbon dioxide",
          "heat"
        ]
      },
      "viewOptions": {
        "controlButtons": "play_reset"
      },
      "onLoad": [
        "post('createCO2', 4);",
        "onPropertyChange('spotlightActive', function() {",
        "  if (get('spotlightActive')) return;",
        "  // Agent may leave model area what causes spotlight deactivation.",
        "  // Ensure buttons are in sync with actual spotlight state.",
        "  if (get('followEnergy')) set('followEnergy', false);",
        "  if (get('followCO2'))    set('followCO2', false);",
        "});"
      ]
    }
  ],
  "parameters": [
    {
      "name": "followEnergy",
      "initialValue": false,
      "onChange": [
        "// Note that we have to use .post() instead of method shortcuts, as this handler is",
        "// called before iframe can register its methods (before iframe communication is started).",
        "if (value) {",
        "  post('addSunraySpotlight');",
        "  setComponentAttributes('followEnergyButton', {text: 'Stop following'});",
        "} else {",
        "  post('removeSpotlight');",
        "  setComponentAttributes('followEnergyButton', {text: 'Follow energy packet'});",
        "}"
      ]
    },
    {
      "name": "followCO2",
      "initialValue": false,
      "onChange": [
        "// Note that we have to use .post() instead of method shortcuts, as this handler is",
        "// called before iframe can register its methods (before iframe communication is started).",
        "if (value) {",
        "  post('addCO2Spotlight');",
        "  setComponentAttributes('followCO2Button', {text: 'Stop following'});",
        "} else {",
        "  post('removeSpotlight');",
        "  setComponentAttributes('followCO2Button', {text: 'Follow CO₂'});",
        "}"
      ]
    }
  ],
  "outputs": [
    {
      "name": "spotlightActive",
      "value": "return iframeOutput('spotlightActive');"
    },
    {
      "name": "year",
      "label": "Year",
      "format": "d",
      "unitName": "Year",
      "value": "return iframeOutput('year');"
    },
    {
      "name": "temperatureChange",
      "label": "Temperature Change",
      "format": "3.1f",
      "unitName": "degrees Celsius",
      "unitAbbreviation": "°C",
      "value": "return iframeOutput('temperatureChange');"
    },
    {
      "name": "co2Concentration",
      "label": "CO₂ Concentration",
      "format": "3.0f",
      "unitName": "",
      "unitAbbreviation": "",
      "value": "return iframeOutput('co2Concentration');"
    }
  ],
  "components": [
      {
      "type": "graph",
      "id": "temperatureGraph",
      "title": "Temperature Change",
      "xlabel": "Time (year)",
      "ylabel": "Temperature (°C)",
      "xmin": 2013,
      "xmax": 2020,
      "ymin": -5,
      "ymax": 10,
      "xTickCount": 4,
      "yTickCount": 5,
      "xFormatter": "d",
      "properties": ["temperatureChange"],
      "xProperty": "year",
      "resetAxesOnReset": true,
      "height": "100%"
    },
    {
      "type": "graph",
      "id": "co2Graph",
      "title": "CO₂ in Atmosphere",
      "xlabel": "Time (year)",
      "ylabel": "Concentration",
      "xmin": 2013,
      "xmax": 2020,
      "ymin": 0,
      "ymax": 100,
      "xTickCount": 4,
      "yTickCount": 5,
      "xFormatter": "d",
      "properties": ["co2Concentration"],
      "xProperty": "year",
      "resetAxesOnReset": true,
      "height": "100%"
    },
    {
      "type": "slider",
      "id": "speedSlider",
      "title": "Simulation speed",
      "min": 20,
      "max": 60,
      "steps": 10,
      "property": "animRate",
      "labels": [
        {
          "value": 20,
          "label": "slowest"
        },
        {
          "value": 60,
          "label": "fastest"
        }
      ],
      "width": "10em"
    },
    {
      "type": "text",
      "id": "showLabel",
      "text": "Show:"
    },
    {
      "type": "checkbox",
      "id": "showGasesCheckbox",
      "text": "Gases",
      "property": "showGases"
    },
    {
      "type": "checkbox",
      "id": "showRaysCheckbox",
      "text": "Rays",
      "property": "showRays"
    },
    {
      "type": "checkbox",
      "id": "showHeatCheckbox",
      "text": "Heat",
      "property": "showHeat"
    },
    {
      "type": "button",
      "id": "removeCo2Button",
      "text": "Remove CO₂",
      "action": "subtractCO2();"
    },
    {
      "type": "button",
      "id": "followEnergyButton",
      "text": "Follow energy packet",
      "action": [
        "set('followCO2', false);",
        "set('followEnergy', !get('followEnergy'));"
      ]
    },
    {
      "type": "button",
      "id": "followCO2Button",
      "text": "Follow CO₂",
      "action": [
        "set('followEnergy', false);",
        "set('followCO2', !get('followCO2'));"
      ]
    },
    {
      "type": "button",
      "id": "eruptButton",
      "text": "Erupt!",
      "action": "erupt();"
    }
  ],
  "layout": {
    "rightTop": [
      "temperatureGraph"
    ],
    "rightBottom": [
      "co2Graph"
    ],
    "bottom": [
      [
        "speedSlider",
        "showLabel",
        "showGasesCheckbox",
        "showRaysCheckbox",
        "showHeatCheckbox"
      ],
      [
        "eruptButton",
        "removeCo2Button",
        "followEnergyButton",
        "followCO2Button"
      ]
    ]
  },
  "template": [
    {
      "id": "rightTop",
      "left": "model.right",
      "width": "0.5 * model.width",
      "height": "0.5 * model.height"
    },
    {
      "id": "rightBottom",
      "left": "model.right",
      "top": "rightTop.bottom",
      "width": "0.5 * model.width",
      "height": "0.5 * model.height"
    },
    {
      "id": "bottom",
      "top": "model.bottom",
      "width": "interactive.width"
    }
  ]
}